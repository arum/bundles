<?xml version="1.0" encoding="utf-8"?>
<!--

	 /*
	 uk.co.arum.osgi.amf3.sample

	 Copyright (C) 2008 - 2009 Arum Systems Ltd

	 This file is part of the uk.co.arum.osgi.amf3.sample bundle.

	 uk.co.arum.osgi.amf3.sample is free software; you can redistribute it and/or modify
	 it under the terms of the GNU Lesser General Public License as published by
	 the Free Software Foundation; either version 3 of the License, or (at your
	 option) any later version.

	 uk.co.arum.osgi.amf3.sample is distributed in the hope that it will be useful, but
	 WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
	 FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License
	 for more details.

	 You should have received a copy of the GNU Lesser General Public License
	 along with this library; if not, see <http://www.gnu.org/licenses/>.
	 */


-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
				layout="vertical"
				implements="mx.rpc.IResponder"
				creationComplete="onCreationComplete(event)">

	<mx:Script>
		<![CDATA[
			import uk.co.arum.osgi.amf3.sample.test001.MidLevel;
			import uk.co.arum.osgi.amf3.sample.test001.BottomLevel;
			import uk.co.arum.osgi.amf3.sample.test001.TopLevel;
			import mx.utils.StringUtil;
			import mx.collections.ArrayCollection;
			import mx.messaging.channels.AMFChannel;
			import mx.controls.Alert;
			import mx.rpc.events.FaultEvent;
			import mx.messaging.events.MessageEvent;
			import mx.rpc.events.ResultEvent;
			import mx.messaging.messages.AsyncMessage;
			import mx.messaging.Channel;
			import mx.messaging.ChannelSet;
			import uk.co.arum.osgi.amf3.sample.VerySimpleObject;
			import uk.co.arum.osgi.amf3.sample.SampleObject;

			private var sample:SampleObject;

			private var simple:VerySimpleObject;

			private function onCreationComplete(event:Event):void
			{
				simpleService.setRemoteCredentials("remotecredentials", "12345");
				
				simple=createVerySimpleObject("very simple");

				sample=createSampleObject("sample object", null, 1024);
				var child1:SampleObject=createSampleObject("child 1", sample, 22);
				var child2:SampleObject=createSampleObject("child 2", sample, 65);
				var child3:SampleObject=createSampleObject("child 3", sample, 65);
				var child2_1:SampleObject=createSampleObject("child 2.1", child2, 2011);

				var cs:ChannelSet=new ChannelSet();
				var channel:Channel=new AMFChannel("events", "/amf3osgi");
				cs.addChannel(channel);
				consumer.channelSet=cs;
				consumer.subscribe();

				producer.channelSet=cs;
				producer.send(createAsyncMessage());
			}

			private function createVerySimpleObject(name:String):VerySimpleObject
			{
				var vso:VerySimpleObject=new VerySimpleObject();
				vso.name=name;
				return vso;
			}

			private function createSampleObject(name:String, parent:SampleObject, value:Number):SampleObject
			{
				var sample:SampleObject=new SampleObject();

				sample.parent=parent;
				if (sample.parent)
				{
					if (!sample.parent.children)
					{
						sample.parent.children=new ArrayCollection();
					}
					sample.parent.children.addItem(sample);
				}

				sample.name=name;
				sample.value=value;
				return sample;
			}

			private function createAsyncMessage(text:String="Hello"):AsyncMessage
			{
				var async:AsyncMessage=new AsyncMessage();
				async.destination="events";
				async.body={"Say":text};
				return async;
			}

			private function onFault(event:Event):void
			{
				Alert.show(event.toString());
			}

			private function onResult(event:ResultEvent):void
			{
				textArea.text=event.toString() + "\n" + textArea.text;
				textArea.text=event.result.toString() + "\n" + textArea.text;
			}

			public function fault(o:Object):void
			{
				onFault(FaultEvent(o));
			}

			public function result(o:Object):void
			{
				onResult(ResultEvent(o));
			}

			private function onClickSendButton(event:Event):void
			{
				producer.send(createAsyncMessage(textInput.text));
			}

			private function onConsumerMessage(event:MessageEvent):void
			{
				messagesArea.text=event.toString() + "\n" + messagesArea.text;
				messagesArea.text=event.message.body.Say + "\n" + messagesArea.text;
			}
			
			private function executeTest001() : void {
				
				var bottom1:BottomLevel = new BottomLevel();
				bottom1.name = "bottom1";

				var bottom2:BottomLevel = new BottomLevel();
				bottom2.name = "bottom2";

				var bottom3:BottomLevel = new BottomLevel();
				bottom3.name = "bottom3";
				
				var mid1:MidLevel = new MidLevel();
				mid1.name = "mid1";
				mid1.bottom = bottom1;

				var mid2:MidLevel = new MidLevel();
				mid2.name = "mid2";
				mid2.bottom = bottom2;

				var mid3:MidLevel = new MidLevel();
				mid3.name = "mid3";
				mid3.bottom = bottom3;

				// this is the one i expect to cause problems, as it references an object already referenced
				var mid4:MidLevel = new MidLevel();
				mid4.name = "mid4";
				mid4.bottom = bottom1;
				
				var top:TopLevel = new TopLevel();
				top.midLevels = new ArrayCollection();
				top.midLevels.addItem(mid1);
				top.midLevels.addItem(mid2);
				top.midLevels.addItem(mid3);
				top.midLevels.addItem(mid4);
//				top.midLevels = [ mid1, mid2, mid3, mid4 ];
				
				test001.executeTest(top);
			}
			
		]]>
	</mx:Script>

	<mx:Consumer id="consumer"
				 message="onConsumerMessage(event)"
				 destination="events"
				 fault="onFault(event)"/>

	<mx:Producer id="producer"
				 destination="events"
				 fault="onFault(event)"/>

	<mx:RemoteObject id="test001"
					 endpoint="/amf3osgi"
					 destination="uk.co.arum.osgi.amf3.sample.test001.Test001Service" />

	<mx:RemoteObject id="simpleService"
					 endpoint="/amf3osgi"
					 destination="uk.co.arum.osgi.amf3.sample.SimpleService"
					 >
		<mx:method id="echoMethod"
				   name="echo"
				   result="onResult(event)"
				   fault="onFault(event)"/>
		<mx:method id="reverseMethod"
				   name="reverse"
				   result="onResult(event)"
				   fault="onFault(event)"/>
		<mx:method id="randomMethod"
				   name="random"
				   result="onResult(event)"
				   fault="onFault(event)"/>
		<mx:method id="getSampleObjectMethod"
				   name="getSampleObject"
				   result="onResult(event)"
				   fault="onFault(event)"/>
		<mx:method id="sendVerySimpleObjectMethod"
				   name="sendVerySimpleObject"
				   result="onResult(event)"
				   fault="onFault(event)"/>
		<mx:method id="sendSampleObjectMethod"
				   name="sendSampleObject"
				   result="onResult(event)"
				   fault="onFault(event)"/>
		<mx:method id="throwExceptionMethod"
				   name="throwException"
				   result="onResult(event)"
				   fault="onFault(event)"/>
	</mx:RemoteObject>

	<mx:HBox width="100%"
			 defaultButton="{echoButton}">
		<mx:Label text="Enter Your Text:"/>
		<mx:TextInput id="textInput"
					  width="100%"/>
		<mx:Button id="echoButton"
				   label="Echo"
				   click="simpleService.echo(textInput.text)"
				   enabled="{StringUtil.trim(textInput.text).length > 0}"/>
		<mx:Button id="reverseButton"
				   label="Reverse"
				   click="simpleService.reverse(textInput.text)"
				   enabled="{StringUtil.trim(textInput.text).length > 0}"/>
		<mx:Button id="sendButton"
				   label="Send"
				   click="onClickSendButton(event)"
				   toolTip="Send text as a message"
				   enabled="{StringUtil.trim(textInput.text).length > 0}"/>
		<mx:Button id="exceptionButton"
				   label="Exception"
				   click="simpleService.throwException(textInput.text)"
				   toolTip="Have the server thrown an exception with the given message"
				   enabled="{StringUtil.trim(textInput.text).length > 0}"/>
	</mx:HBox>

	<mx:HBox width="100%">
		<mx:Button id="randomButton"
				   label="Get Random Number"
				   click="simpleService.random()"
				   toolTip="Have the server generate a random number"/>
		<mx:Button id="getSampleObjectButton"
				   label="Get Sample Object"
				   click="simpleService.getSampleObject()"
				   toolTip="Have the server retrieve a sample object instance"/>
		<mx:Button id="sendVerySimpleObjectButton"
				   label="Send Very Simple Object"
				   click="simpleService.sendVerySimpleObject(simple)"
				   toolTip="Send a simple object"/>
		<mx:Button id="sendSampleObjectButton"
				   label="Send Sample Object"
				   click="simpleService.sendSampleObject(sample)"
				   toolTip="Send and retrieve a more complicated sample object"/>
				   
		<mx:Button id="test001Button"
				   label="Execute Test 001"
				   click="executeTest001()" />
				   
	</mx:HBox>

	<mx:HBox width="100%"
			 height="100%">
		<mx:Panel title="Output from remote methods"
				  width="100%"
				  height="100%">
			<mx:TextArea id="textArea"
						 width="100%"
						 height="100%"/>
		</mx:Panel>
		<mx:Panel title="Messages"
				  width="100%"
				  height="100%">
			<mx:TextArea id="messagesArea"
						 width="100%"
						 height="100%"/>
		</mx:Panel>
	</mx:HBox>

	<mx:HBox width="100%">
		<mx:Spacer width="100%"/>
		<mx:Button label="Clear"
				   click="textArea.text = ''"/>
	</mx:HBox>

</mx:Application>
